{"ast":null,"code":"import _regeneratorRuntime from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/user/Downloads/sync/github/react-lawful-neutral/client/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/user/Downloads/sync/github/react-lawful-neutral/client/src/Host.js\";\nimport React, { Component } from 'react';\n\nvar Host =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Host, _Component);\n\n  function Host() {\n    var _this;\n\n    _classCallCheck(this, Host);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Host).call(this)); // init state\n\n    _this.getHostId =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var response, body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('/api/host');\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              body = _context.sent;\n\n              if (!(response.status !== 200)) {\n                _context.next = 8;\n                break;\n              }\n\n              throw Error(body.message);\n\n            case 8:\n              ;\n              console.log(body.hostId); // DEBUG: log response from server on client\n              // response can be returned\n\n              return _context.abrupt(\"return\", body.hostId.toString());\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n    _this.state = {\n      hostId: '...',\n      peerConn: null\n    }; // bind contexts\n\n    _this.setHostId = _this.setHostId.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.getHostId = _this.getHostId.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Host, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // set hostId\n      this.setHostId();\n      pc = new RTCPeerConnection({\n        'iceServers': [{\n          'urls': 'stun:stun'\n        }]\n      }); // this.setState({\n      //   peerConn: \n      // });\n    }\n  }, {\n    key: \"setHostId\",\n    value: function setHostId() {\n      var _this2 = this;\n\n      // call getHostId, set state.hostId with response or show errors\n      this.getHostId().then(function (res) {\n        return _this2.setState({\n          hostId: res\n        });\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"Host \", this.state.hostId);\n    }\n  }]);\n\n  return Host;\n}(Component);\n\n;\nexport default Host;","map":{"version":3,"sources":["/home/user/Downloads/sync/github/react-lawful-neutral/client/src/Host.js"],"names":["React","Component","Host","getHostId","fetch","response","json","body","status","Error","message","console","log","hostId","toString","state","peerConn","setHostId","bind","pc","RTCPeerConnection","then","res","setState","catch","err"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;IAEMC,I;;;;;AAEJ,kBAAc;AAAA;;AAAA;;AACZ,+EADY,CAEZ;;AAFY,UA4BdC,SA5Bc;AAAA;AAAA;AAAA;AAAA,6BA4BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEaC,KAAK,CAAC,WAAD,CAFlB;;AAAA;AAEJC,cAAAA,QAFI;AAAA;AAAA,qBAISA,QAAQ,CAACC,IAAT,EAJT;;AAAA;AAIJC,cAAAA,IAJI;;AAAA,oBAMNF,QAAQ,CAACG,MAAT,KAAoB,GANd;AAAA;AAAA;AAAA;;AAAA,oBAQFC,KAAK,CAACF,IAAI,CAACG,OAAN,CARH;;AAAA;AAST;AACDC,cAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACM,MAAjB,EAVU,CAUgB;AAC1B;;AAXU,+CAYHN,IAAI,CAACM,MAAL,CAAYC,QAAZ,EAZG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA5BE;AAGZ,UAAKC,KAAL,GAAa;AACXF,MAAAA,MAAM,EAAE,KADG;AAEXG,MAAAA,QAAQ,EAAE;AAFC,KAAb,CAHY,CAOZ;;AACA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AACA,UAAKf,SAAL,GAAiB,MAAKA,SAAL,CAAee,IAAf,uDAAjB;AATY;AAUb;;;;wCAEmB;AAClB;AACA,WAAKD,SAAL;AACAE,MAAAA,EAAE,GAAG,IAAIC,iBAAJ,CAAsB;AAAC,sBAAa,CAAC;AAAC,kBAAO;AAAR,SAAD;AAAd,OAAtB,CAAL,CAHkB,CAIlB;AACA;AACA;AACD;;;gCAEW;AAAA;;AACV;AACA,WAAKjB,SAAL,GACCkB,IADD,CACM,UAAAC,GAAG;AAAA,eAAI,MAAI,CAACC,QAAL,CAAc;AAAEV,UAAAA,MAAM,EAAES;AAAV,SAAd,CAAJ;AAAA,OADT,EAECE,KAFD,CAEO,UAAAC,GAAG;AAAA,eAAId,OAAO,CAACC,GAAR,CAAYa,GAAZ,CAAJ;AAAA,OAFV;AAGD;;;6BAiBQ;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAW,KAAKV,KAAL,CAAWF,MAAtB,CADF;AAGD;;;;EAjDgBZ,S;;AAmDlB;AAED,eAAeC,IAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass Host extends Component {\n\n  constructor() {\n    super();\n    // init state\n    this.state = {\n      hostId: '...',\n      peerConn: null,\n    };\n    // bind contexts\n    this.setHostId = this.setHostId.bind(this);\n    this.getHostId = this.getHostId.bind(this);\n  }\n\n  componentDidMount() {\n    // set hostId\n    this.setHostId();\n    pc = new RTCPeerConnection({'iceServers':[{'urls':'stun:stun'}]});\n    // this.setState({\n    //   peerConn: \n    // });\n  };\n\n  setHostId() {\n    // call getHostId, set state.hostId with response or show errors\n    this.getHostId()\n    .then(res => this.setState({ hostId: res }))\n    .catch(err => console.log(err));\n  };\n\n  getHostId = async () => {\n    // call server for hostId\n    const response = await fetch('/api/host');\n    // store response from server\n    const body = await response.json();\n    // check for errors\n    if (response.status !== 200) {\n      // something went wrong\n      throw Error(body.message);\n    };\n    console.log(body.hostId); // DEBUG: log response from server on client\n    // response can be returned\n    return body.hostId.toString();\n  };\n\n  render() {\n    return (\n      <h2>Host { this.state.hostId }</h2>\n    );\n  };\n\n};\n\nexport default Host;"]},"metadata":{},"sourceType":"module"}